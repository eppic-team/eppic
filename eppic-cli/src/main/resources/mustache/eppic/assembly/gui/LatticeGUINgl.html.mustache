<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
</head>
<body>
	<script src="https://rawgit.com/sbliven/ngl/master/js/build/ngl.embedded.js"></script>
	<script>
	NGL.mainScriptFilePath = "https://rawgit.com/sbliven/ngl/master/js/build/ngl.embedded.js";
	document.addEventListener( "DOMContentLoaded", function() {
		var stage = new NGL.Stage( "viewport" );
		stage.setParameters({ theme:"light"} );
		//stage.loadFile( "rcsb://1smt", { defaultRepresentation: true } ).then(function(o) {
		stage.loadFile( "{{strucURI}}", { defaultRepresentation: false } ).then(function(o) {
			o.addRepresentation( "ribbon", { transparent: true, opacity: .4, color: "chainindex" });
			////////  spheres  ///////////////////////////////////////////////
			var spherePositions = [
					{{#graph.graph.vertexSet}}
					{{center.x}},{{center.y}},{{center.z}},
					{{/graph.graph.vertexSet}}
				];
			var sphereColors = [
					{{#graph.graph.vertexSet}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/graph.graph.vertexSet}}
				];
			var sphereRadii = [
					{{#graph.graph.vertexSet}}
					5.0,
					{{/graph.graph.vertexSet}}
				];
			var sphereBuffer = new NGL.SphereBuffer(
					new Float32Array( spherePositions ),  // position (xyz)
					new Float32Array( sphereColors ),  // color (rgb) - first 3 numbers is the color code for 1 sphere
					new Float32Array( sphereRadii )  // radius
			);
			o.addBufferRepresentation( sphereBuffer );
			////////  unit cell ///////////////////////////////////////////////
			o.addRepresentation( "unitcell" );
			////////  cylinders ///////////////////////////////////////////////
			//// cylinders - arrows /////
			var arrowsStartPositions = [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{start.x}},{{start.y}},{{start.z}},
					{{/segments}}{{/graph.graph.edgeSet}}
				];
			var arrowsEndPositions =  [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{end.x}},{{end.y}},{{end.z}},
					{{/segments}}{{/graph.graph.edgeSet}}
				];
			var arrowsColors = [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/segments}}{{/graph.graph.edgeSet}}
				];
			var arrowsRadii = [
					{{#graph.graph.edgeSet}}{{#segments}}
					0.3,
					{{/segments}}{{/graph.graph.edgeSet}}
				];
			var arrowsCylinderBuffer = new NGL.CylinderBuffer(
					new Float32Array( arrowsStartPositions ),  // from position (xyz)
					new Float32Array( arrowsEndPositions ),  // to position (xyz)
					new Float32Array( arrowsColors ),  // from color (rgb)
					new Float32Array( arrowsColors ),  // to color (rgb)
					new Float32Array( arrowsRadii )  // radius
			);
			o.addBufferRepresentation( arrowsCylinderBuffer );
			//// cylinders - circles /////
			var circlesStartPositions = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{center.x}},{{center.y}},{{center.z}},
					{{/circles}}{{/graph.graph.edgeSet}}
				];
			var circlesEndPositions =  [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{perpendicular.x}},{{perpendicular.y}},{{perpendicular.z}},
					{{/circles}}{{/graph.graph.edgeSet}}
				];
			var circlesColors = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/circles}}{{/graph.graph.edgeSet}}
				];
			var circlesRadii = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{radius}},
					{{/circles}}{{/graph.graph.edgeSet}}
				];
			var circlesCylinderBuffer = new NGL.CylinderBuffer(
					new Float32Array( circlesStartPositions ),  // from position (xyz)
					new Float32Array( circlesEndPositions ),  // to position (xyz)
					new Float32Array( circlesColors ),  // from color (rgb)
					new Float32Array( circlesColors ),  // to color (rgb)
					new Float32Array( circlesRadii )  // radius
			);
			o.addBufferRepresentation( circlesCylinderBuffer );
			//cylinders - disks?
			//how to do labels?
			
			stage.centerView();
		} ); //add event listener
	} );
	</script>
	<div id="viewport" style="width:{{size}}px; height:{{size}}px;"></div>
</body>
</html>