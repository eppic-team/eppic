<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
</head>
<body>

	<script src="{{url3Dmol}}"></script>

	<script>
	// regen
	 NGL.mainScriptFilePath = "{{url3Dmol}}";
	 
	 // exposing the stage variable so that we can do things on the console
	 var stage;	 
	 
	 document.onkeypress = function (e) {
		e = e || window.event;

		if (e !== undefined && e.which == 115) { // 115 is s
			console.log("s was pressed: small screenshot (1x)");
			screenshot(1);
		}

		if (e !== undefined && e.which == 109) { // 109 is m
			console.log("m was pressed: medium screenshot (2x)");
			screenshot(2);
		}

		if (e !== undefined && e.which == 108) { // 108 is l
			console.log("l was pressed: large screenshot (3x)");
			screenshot(3);
		}

		if (e !== undefined && e.which == 120) { // 120 is x
			console.log("x was pressed: xtra large screenshot (4x)");
			screenshot(4);
		}

	 };

	 /**
	  * A function to trigger a png transparent screenshot with given factor
      * @param factor the number of times the current canvas size will be multiplied by
	  */
	 function screenshot(factor) {
		if (stage!==undefined) {
			stage.makeImage({factor: factor, antialias: true, trim: false, transparent: true}).then(function(blob) { NGL.download(blob) } )
		}
	 }
	 
	 
	 document.addEventListener( "DOMContentLoaded", function() {

		stage = new NGL.Stage( "viewport" );

		stage.setParameters({ backgroundColor:"white"} );

		stage.loadFile( "{{strucURI}}", { defaultRepresentation: false } ).then(function(o) {
			
			
			// operators to create the unit cell
			var operators = [
			{{#graph.unitCellTransforms}} 
			new THREE.Matrix4().set(
				{{m00}}, {{m01}}, {{m02}}, {{m03}},
				{{m10}}, {{m11}}, {{m12}}, {{m13}},
				{{m20}}, {{m21}}, {{m22}}, {{m23}},
				{{m30}}, {{m31}}, {{m32}}, {{m33}}),
			{{/graph.unitCellTransforms}}
			];
			
			// show full unit cell with NGL's built-in assembly
			//o.addRepresentation( "cartoon", { opacity: 0.5, side: THREE.FrontSide, assembly: "UNITCELL" } );
			
			// show our own full unit cell from our operators list		
			var assembly = new NGL.Assembly( "LATTICEGRAPH_UNITCELL" );
			for (var i=0; i < operators.length; i++) {
				assembly.addPart(
					[ operators[i] ],
					[]  // leave empty for all chains, otherwise author chainnames [ "A", "B" ]
				);
			}
			o.structure.biomolDict[ "LATTICEGRAPH_UNITCELL" ] = assembly;
			o.addRepresentation( "cartoon", { opacity: 0.5, side: THREE.FrontSide, assembly: "LATTICEGRAPH_UNITCELL" } );
			
			
			////////  spheres  ///////////////////////////////////////////////
			var spherePositions = [
					{{#graph.graph.vertexSet}}
					{{center.x}},{{center.y}},{{center.z}},
					{{/graph.graph.vertexSet}}
			];
			
			var sphereColors = [
					{{#graph.graph.vertexSet}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/graph.graph.vertexSet}}
			];
			
			var sphereRadii = [
					{{#graph.graph.vertexSet}}
					5.0,
					{{/graph.graph.vertexSet}}
			];
			
			var sphereBuffer = new NGL.SphereBuffer(
					new Float32Array( spherePositions ),  // position (xyz)
					new Float32Array( sphereColors ),  // color (rgb) - first 3 numbers is the color code for 1 sphere
					new Float32Array( sphereRadii )  // radius
			);
			
			o.addBufferRepresentation( sphereBuffer );
			
			////////  sphere labels ///////////////////////////////////////////////
			var textLabels = [
					{{#graph.graph.vertexSet}}
					"{{toString}}",
					{{/graph.graph.vertexSet}}
			];
			
			var labelColors = [
					{{#graph.graph.vertexSet}}
					0,0,0,
					{{/graph.graph.vertexSet}}
			];
			
			var textBuffer = new NGL.TextBuffer(
					spherePositions, 
					sphereRadii, // size
					labelColors, // color
					textLabels, // text
					// note "sdf:false" is to workaround an issue in firefox where labels are not shown
					// see https://github.com/arose/ngl/issues/136
					// we can remove it when next release is available (after 0.7.1.a)					
					{zOffset: 10, yOffset:-1, xOffset:-2, sdf: false} // params
			);
			
			o.addBufferRepresentation( textBuffer );
			
			////////  unit cell ///////////////////////////////////////////////
			o.addRepresentation( "unitcell" );
			
			////////  cylinders ///////////////////////////////////////////////
			//// cylinders - arrows /////
			
			var arrowsStartPositions = [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{start.x}},{{start.y}},{{start.z}},
					{{/segments}}{{/graph.graph.edgeSet}}
			];
			
			var arrowsEndPositions =  [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{end.x}},{{end.y}},{{end.z}},
					{{/segments}}{{/graph.graph.edgeSet}}
			];
			
			var arrowsColors = [
					{{#graph.graph.edgeSet}}{{#segments}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/segments}}{{/graph.graph.edgeSet}}
			];
			
			var arrowsRadii = [
					{{#graph.graph.edgeSet}}{{#segments}}
					0.3,
					{{/segments}}{{/graph.graph.edgeSet}}
			];
			
			var arrowsCylinderBuffer = new NGL.CylinderBuffer(
					new Float32Array( arrowsStartPositions ),  // from position (xyz)
					new Float32Array( arrowsEndPositions ),  // to position (xyz)
					new Float32Array( arrowsColors ),  // from color (rgb)
					new Float32Array( arrowsColors ),  // to color (rgb)
					new Float32Array( arrowsRadii )  // radius
			);
			
			o.addBufferRepresentation( arrowsCylinderBuffer );
			
			//// cylinders - circles /////
			var circlesStartPositions = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{center.x}},{{center.y}},{{center.z}},
					{{/circles}}{{/graph.graph.edgeSet}}
			];
							
			var circlesEndPositions =  [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{perpendicular.x}},{{perpendicular.y}},{{perpendicular.z}},
					{{/circles}}{{/graph.graph.edgeSet}}
			];
			
			var circlesColors = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{color.red}}/255., {{color.green}}/255.,{{color.blue}}/255.,
					{{/circles}}{{/graph.graph.edgeSet}}
			];
			
			var circlesRadii = [
					{{#graph.graph.edgeSet}}{{#circles}}
					{{radius}},
					{{/circles}}{{/graph.graph.edgeSet}}
			];
			
			var circlesCylinderBuffer = new NGL.CylinderBuffer(
					new Float32Array( circlesStartPositions ),  // from position (xyz)
					new Float32Array( circlesEndPositions ),  // to position (xyz)
					new Float32Array( circlesColors ),  // from color (rgb)
					new Float32Array( circlesColors ),  // to color (rgb)
					new Float32Array( circlesRadii )  // radius
			);
			
			o.addBufferRepresentation( circlesCylinderBuffer );
			
			
			/////////////// labels - circles ////////////////////////////////////
			var textLabelsCircles = [
					{{#graph.graph.edgeSet}}{{#circles}}
					"{{interfaceId}}",
					{{/circles}}{{/graph.graph.edgeSet}}				
			];
			
			var labelColorsCircles = [
					{{#graph.graph.vertexSet}}
					0,0,0,
					{{/graph.graph.vertexSet}}
			];
			
			var textBufferCircles = new NGL.TextBuffer(
					circlesStartPositions, 
					circlesRadii, // size
					labelColorsCircles, // color
					textLabelsCircles, // text
					// note "sdf:false" is to workaround an issue in firefox where labels are not shown
					// see https://github.com/arose/ngl/issues/136
					// we can remove it when next release is available (after 0.7.1.a)
					{zOffset: 5, sdf: false} // params
			);
			
			o.addBufferRepresentation( textBufferCircles );	
					
			stage.centerView();
			
		} ); //add event listener
	} );
	
	</script>
	
	<div id="viewport" style="width:{{size}}px; height:{{size}}px;"></div>
	
</body>
</html>