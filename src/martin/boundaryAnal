#!/bin/bash

# -c PDB.chainevolcontext.dat
# -u UNIPROT
# -h plot height
# -p psipred
# -m csv of important residues
# -s signalP path

usage()
{
cat << EOF
usage: $0 options

OPTIONS:

   MANDATORY:
	-c PDB.chainevolcontext.dat 
	-u UNIPROT
	-o type of organism (gram-|gram+|euk)

   ADDITIONAL PARAMS
	-h plot height
	-p psipred
	-m csv of important residues
	-s pathTo Signalp executable (default hardcoded)
EOF
}

chainevol=
uniprot=
plotheight=1.5
psipred=
important=
signalp="/afs/psi.ch/project/bioinfo/software/signalp-3.0/signalp"
organism=


while getopts "c:u:h:p:m:s:o:" OPTION ; do
	case $OPTION in
		c)
			chainevol=$OPTARG
			;;
		u)
			uniprot=$OPTARG
			;;
		h)	
			plotheight=$OPTARG
			;;
		p)
			psipred=$OPTARG
			;;
		m)
			important=$OPTARG
			;;
		s)
			signalp=$OPTARG
			;;
		o)
			organism=$OPTARG
			;;
		?)
			usage
			exit
			;;
	esac
done


if [[ -z $chainevol ]] || [[ -z $uniprot ]] || [[ -z $organism ]] ; then
     usage
     exit 1
fi


java -cp /afs/psi.ch/project/bioinfo/software/jars/boundary_parser.jar martin.boundaryparser -c ${chainevol} -u ${uniprot} -p ${psipred} -s ${signalp} -o ${organism}

if [[ -e "values_${uniprot}.txt" ]] ; then
	echo "Plotting information"
	R --vanilla --slave < /afs/psi.ch/project/bioinfo/software/bin/profile-plots.R --args $uniprot $plotheight $important
else
	echo "\"boundaryparser\" did not run successfully"
	exit
fi



